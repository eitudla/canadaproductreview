
pid /run/nginx.pid;

user www-data;

# Might be good practice to log docker errors to sterr. However makes debugging hard. So rather putting it into a file.
# error_log /dev/stderr info;
error_log /var/log/nginx/nginx_error.log  warn;

# Set one worker process per core.
worker_processes auto;

# a system with 4 cores, this would allow us to have 4 x 2048 = 8192 simultaneous connections!
events {
  worker_connections 2048;
  multi_accept on;
  use epoll;
}

http {
  server_tokens off;

  #sendfile on;

  #tcp_nopush on;
  #tcp_nodelay on;

  #keepalive_timeout 15;

  #types_hash_max_size 2048;

  client_max_body_size 20M;

  # Don't let Ngnix cache. Always serve. Otherwise webpack build process might complain with ERR_CONTENT_LENGTH_MISMATCH 200 (OK) on rebuild
  #proxy_max_temp_file_size 0;
  #proxy_buffering off;

  #efault_type application/octet-stream;

  gzip on;
  gzip_disable "msie6";
  gzip_proxied any;
  gzip_vary on;

  #open_file_cache max=100;

  log_format docker '$remote_addr $remote_user $status "$request" "$http_referer" "$http_user_agent" ';

  access_log /dev/stdout docker;

  include /etc/nginx/mime.types;

   # htpasswd for any domains that use HTTPS (not local)
  map $host $auth_type {
    default "Restricted";
    dev.merq.com "off";
    localhost: "off";
  }

  # # htpasswd password loation
  # map $host $auth_file_location {
  #   default "/etc/nginx/.htpasswd";
  # }

   server {
    listen *:443 ssl;
    server_name $SERVER_NAME $SERVER_ALIAS;
    root   /var/www/code/webroot;
    index index.php;

    ssl_certificate            /etc/ssl/server.crt;
    ssl_certificate_key        /etc/ssl/server.key;

    location / {
      try_files $uri $uri/ /index.php$is_args$args;
    }

    location ~ \.php$ {
         try_files $uri /index.php =404;
        fastcgi_pass unix:/run/php-fpm.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        include /etc/nginx/fastcgi.conf;
    }


  }

}




